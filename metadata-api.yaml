openapi: 3.0.0
info:
  title: Droplet Metadata API
  description: The calls for the Droplet Metadata API
  version: 0.1.9
servers:
  - url: http://169.254.169.254/metadata/v1

paths:
  /metadata/v1.json:
    get:
      summary: Returns Droplet's metadata as JSON.
      operationId: getMetadata
      description: Returns the entire contents of Droplet's matadata, in JSON. This endpoint is unique because it returns all of the metadata at once, instead of individual metadata items.
      responses:
        '200':
          description: A JSON array of Droplet metadata.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/metadata'
        '301':
          $ref: '#/components/responses/MovedPermanently'
        '404':
          $ref: '#/components/responses/NotFound'

  /metadata/v1:
    get:
      summary: Metadata index.
      operationId: getMetadataIndex
      description: The top-level metadata index. This index can be navigated to find all available Metadata endpoints.
      responses:
        '200':
          description: A list of metadata endpoints.
          content:
            text/plain:
              example: |
                  id
                  hostname
                  user-data
                  vendor-data
                  public-keys
                  region
                  interfaces/
                  dns/
                  floating_ip/
                  tags/
                  features/

  /metadata/v1/id:
    get:
      summary: Droplet ID.
      operationId: getDropletId
      description: The Droplet's unique identifier. This is automatically generated upon Droplet creation.
      responses:
        '200':
          description: The Droplet's ID as an integer.
          content:
            text/plain:
              example: "2756294"

  /metadata/v1/hostname:
    get:
      summary: Droplet's hostname.
      operationId: getHostname
      description: The Droplet's hostname, as specified by the user during Droplet creation.
      responses:
        '200':
          description: The Droplet's hostname as plain text.
          content:
            text/plain:
              example: sample-droplet

  /metadata/v1/user-data:
    get:
      summary: Returns Droplet's user data.
      operationId: getUserData
      description: The user data that was provided by the user during Droplet creation. User data can contain arbitrary data for miscellaneous use or, with certain Linux distributions, an arbitrary shell script or cloud-config file that will be consumed by a variation of cloud-init upon boot. At this time, cloud-config support is included with CoreOS, Ubuntu 14.04, and CentOS 7 images on DigitalOcean.
      responses:
        '200':
          description: The user data provided as plain text.
          content:
            text/plain:
              example: |
                #! /bin/bash
                echo "Data from user"

  /metadata/v1/vendor-data:
    get:
      summary: Returns Droplet's vendor data.
      operationId: getVendorData
      description: Vendor-provided data that can be used to configure Droplets upon their creation. This is similar to user data, but it is provided by DigitalOcean instead of the user.
      responses:
        '200':
          description: The vendor data provided as plain text.
          content:
            text/plain:
              example: |
                #cloud-config
                disable_root: false
                manage_etc_hosts: true

                cloud_config_modules:
                 - ssh
                 - set_hostname
                 - [ update_etc_hosts, once-per-instance ]

                cloud_final_modules:
                 - scripts-vendor
                 - scripts-per-once
                 - scripts-per-boot
                 - scripts-per-instance
                 - scripts-user

  /metadata/v1/public-keys:
    get:
      summary: Returns Droplet's public keys.
      operationId: getPublicKeys
      description: Public SSH key(s) that were added to the Droplet's root user's authorized_keys file during Droplet creation.
      responses:
        '200':
          description: The Droplet's public key in plain text.
          content:
            text/plain:
              example: |
                ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCcbi6cygCUmuNlB0KqzBpHXf7CFYb3VE4pDOf/RLJ8OFDjOM+fjF83a24QktSVIpQnHYpJJT2pQMBxD+ZmnhTbKv+OjwHSHwAfkBullAojgZKzz+oN35P4Ea4J78AvMrHw0zp5MknS+WKEDCA2c6iDRCq6/hZ13Mn64f6c372JK99X29lj/B4VQpKCQyG8PUSTFkb5DXTETGbzuiVft+vM6SF+0XZH9J6dQ7b4yD3sOder+M0Q7I7CJD4VpdVD/JFa2ycOS4A4dZhjKXzabLQXdkWHvYGgNPGA5lI73TcLUAueUYqdq3RrDRfaQ5Z0PEw0mDllCzhk5dQpkmmqNi0F sammy@digitalocean.com

  /metadata/v1/region:
    get:
      summary: Returns Droplet's region.
      operationId: getRegion
      description: The region code of where the Droplet resides.
      responses:
        '200':
          description: The Droplet's region as plain text.
          content:
            text/plain:
              example: nyc3

  /metadata/v1/interfaces:
    get:
      summary: Returns index of network interfaces.
      operationId: getInterfaces
      description: An index of all network interfaces by type, e.g. "public" and "private".
      responses:
        '200':
          description: The available interfaces as plain text.
          content:
            text/plain:
              example: |
                public/
                private/

  /metadata/v1/interfaces/public:
    get:
      summary: Returns enumerated index of public interfaces.
      operationId: getInterfacesPublic
      description: An enumerated index of all public network interfaces that are of the specified interface type.
      responses:
        '200':
          description: An enumerated list of public interfaces as plain text.
          content:
            text/plain:
              example: 0/

  /metadata/v1/interfaces/public/0:
    get:
      summary: Returns index of public interface attributes.
      operationId: getInterfacesPublicIndex
      description: An index of the attributes of the specified network interface.
      responses:
        '200':
          description: An index of the Droplet's public interfaces as a plain-text list.
          content:
            text/plain:
              example: |
                mac
                type
                ipv4/
                ipv6/

  /metadata/v1/interfaces/public/0/mac:
    get:
      summary: Returns public interface's MAC address.
      operationId: getInterfacesPublicMac
      description: The MAC address of the specified network interface.
      responses:
        '200':
          description: The Droplet's MAC address as plain text.
          content:
            text/plain:
              example: 04:01:2a:0f:2a:03

  /metadata/v1/interfaces/public/0/type:
    get:
      summary: Returns network interface's type/
      operationId: getInterfacesPublicType
      description: The type of the specified network interface.
      responses:
        '200':
          description: The network interface type as plain text.
          content:
            text/plain:
              example: public

  /metadata/v1/interfaces/public/0/ipv4:
    get:
      summary: Returns IPv4 attributes of public interface.
      operationId: getInterfacesPublicIpv4
      description: An index of the specified network interface's IPv4 attributes.
      responses:
        '200':
          description: The index of available IPv4 attributes as a plain-text list.
          content:
            text/plain:
              example: |
                address
                netmask
                gateway

  /metadata/v1/interfaces/public/0/ipv4/address:
    get:
      summary: Returns the Droplet's public interface's IPv4 address.
      operationId: getInterfacesPublicIpv4Address
      description: The IPv4 address of the specified network interface, as plain text.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: 104.131.20.105

  /metadata/v1/interfaces/public/0/ipv4/netmask:
    get:
      summary: Returns the Droplet's public interface IPv4 netmask.
      operationId: getInterfacesPublicIpv4Netmask
      description: The netmask of the specified network interface.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: 255.255.192.0

  /metadata/v1/interfaces/public/0/ipv4/gateway:
    get:
      summary: Returns the Droplet's public interface gateway address.
      operationId: getInterfacesPublicIpv4Gateway
      description: The gateway of the specified network interface.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: 104.131.0.1

  /metadata/v1/interfaces/public/0/ipv6:
    get:
      summary: Returns an index of IPv6 network interfaces.
      operationId: getInterfacesIpv6
      description: An index of the specified network interface's IPv6 attributes.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: |
                address
                cidr
                gateway

  /metadata/v1/interfaces/public/0/ipv6/address:
    get:
      summary: Returns the IPv6 address of the public interface.
      operationId: getInterfacesIpv6Address
      description: The IPv6 address of the specified network interface.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: 2604:A880:0800:0010:0000:0000:017D:2001

  /metadata/v1/interfaces/public/0/ipv6/cidr:
    get:
      summary: Returns the IPv6 CIDR of the public interface.
      operationId: getInterfacesIpv6Cidr
      description: The IPv6 CIDR of the specified network interface.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: "64"

  /metadata/v1/interfaces/public/0/ipv6/gateway:
    get:
      summary: Returns the IPv6 gateway address of the public interface.
      operationId: getInterfacesIpv6Gateway
      description: The IPv6 gateway address of the specified network interface.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: 2604:A880:0800:0010:0000:0000:0000:0001

  /metadata/v1/interfaces/public/0/anchor_ipv4:
    get:
      summary: Returns an index of IPv4 anchor attributes.
      operationId: getInterfacesIpv4AnchorIndex
      description: An index of the specified "Anchor" network interface's IPv4 attributes. **Note:** An "Anchor" interface is an implementation detail of [DigitalOcean Floating IPs](https://www.digitalocean.com/community/tutorials/how-to-use-floating-ips-on-digitalocean).
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: |
                address
                netmask
                gateway

  /metadata/v1/interfaces/public/0/anchor_ipv4/address:
    get:
      summary: Returns the anchor IPv4 address.
      operationId: getInterfacesIpv4AnchorAddress
      description: The IPv4 address of the specified "Anchor" network interface. **Note:** An "Anchor" interface is an implementation detail of [DigitalOcean Floating IPs](https://www.digitalocean.com/community/tutorials/how-to-use-floating-ips-on-digitalocean).
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: 10.17.0.160

  /metadata/v1/interfaces/public/0/anchor_ipv4/netmask:
    get:
      summary: Returns the anchor IPv4 netmask.
      operationId: getInterfacesIpv4AnchorNetmask
      description: The netmask of the specified "Anchor" network interface. **Note:** An "Anchor" interface is an implementation detail of [DigitalOcean Floating IPs](https://www.digitalocean.com/community/tutorials/how-to-use-floating-ips-on-digitalocean).
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: 255.255.0.0

  /metadata/v1/floating_ip:
    get:
      summary: Returns an index of floating IPs.
      operationId: getFloatingIp
      description: An index of IPv4 Floating IPs.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: ipv4/

  /metadata/v1/floating_ip/ipv4:
    get:
      summary: Returns an index of floating IPv4 attributes.
      operationId: getFloatingIpIpv4
      description: An index of IPv4 Floating IP attributes.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: |
                active
                ip_address

  /metadata/v1/floating_ip/ipv4/active:
    get:
      summary: Returns floating IPv4 status.
      operationId: getFloatingIpIpv4Active
      description: Displays true if a Floating IP is currently assigned to the Droplet and false if it is not.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: true

  /metadata/v1/floating_ip/ipv4/ip_address:
    get:
      summary: Returns floating IPv4 address.
      operationId: getFloatingIpIpv4Address
      description: The IP address of the Floating IP that is currently assigned to the Droplet.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: 45.55.96.17

  /metadata/v1/dns:
    get:
      summary: Returns an index of DNS attributes.
      operationId: getDns
      description: An index of DNS attributes.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: nameservers

  /metadata/v1/dns/nameservers:
    get:
      summary: Returns Droplet's DNS nameservers.
      operationId: getDnsNameservers
      description: The nameserver entries that are added to a Droplet's `/etc/resolv.conf` file during creation.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: |
                2001:4860:4860::8844
                2001:4860:4860::8888
                8.8.8.8

  /metadata/v1/tags:
    get:
      summary: Returns an index of tags associated with the Droplet.
      operationId: getTags
      description: An index of tags associated with the Droplet.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: |
                production
                application
                v1

  /metadata/v1/features:
    get:
      summary: Returns an index of DigitalOcean features available to the Droplet.
      operationId: getFeatures
      description: An index of DigitalOcean features available to the Droplet.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: dhcp_enabled

  /metadata/v1/features/dhcp_enabled:
    get:
      summary: Returns Droplet's DHCP status.
      operationId: getFeaturesDhcp
      description: Whether or not DHCPv4 and DHCPv6 are available to the Droplet.
      responses:
        '200':
          description: Success
          content:
            text/plain:
              example: true


components:

  schemas:
    metadata:
      type: object
      properties:
        droplet_id:
          type: integer
          example: 2756294
        hostname:
          type: string
          example: "sample-droplet"
        vendor_data:
          type: string
          example: "#cloud-config\ndisable_root: false\nmanage_etc_hosts: true\n\ncloud_config_modules:\n - ssh\n - set_hostname\n - [ update_etc_hosts, once-per-instance ]\n\ncloud_final_modules:\n - scripts-vendor\n - scripts-per-once\n - scripts-per-boot\n - scripts-per-instance\n - scripts-user\n"
        public_keys:
          type: array
          items:
              type: string
          example: ["ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCcbi6cygCUmuNlB0KqzBpHXf7CFYb3VE4pDOf/RLJ8OFDjOM+fjF83a24QktSVIpQnHYpJJT2pQMBxD+ZmnhTbKv+OjwHSHwAfkBullAojgZKzz+oN35P4Ea4J78AvMrHw0zp5MknS+WKEDCA2c6iDRCq6/hZ13Mn64f6c372JK99X29lj/B4VQpKCQyG8PUSTFkb5DXTETGbzuiVft+vM6SF+0XZH9J6dQ7b4yD3sOder+M0Q7I7CJD4VpdVD/JFa2ycOS4A4dZhjKXzabLQXdkWHvYGgNPGA5lI73TcLUAueUYqdq3RrDRfaQ5Z0PEw0mDllCzhk5dQpkmmqNi0F sammy@digitalocean.com"]
        region:
          type: string
          example: "nyc3"
        interfaces:
          $ref: '#/components/schemas/Interfaces'
        floating_ip:
          $ref: '#/components/schemas/Floating_ip'
        dns:
          $ref: '#/components/schemas/Dns'
        features:
          $ref: '#/components/schemas/Features'
    Interfaces:
      type: object
      properties:
        private:
          $ref: '#/components/schemas/Private'
        public:
          $ref: '#/components/schemas/Public'
    Private:
      type: array
      items:
        type: object
        properties:
          ipv4:
            type: object
            properties:
              ip_address:
                type: string
                example: 104.131.20.105
              netmask:
                type: string
                example: 255.255.192.0
              gateway:
                type: string
                example: 104.131.0.1
          mac:
            type: string
            example: 04:01:2a:0f:2a:01
          Type:
            type: string
            example: private
    Public:
      type: array
      items:
        type: object
        properties:
          ipv4:
            type: object
            properties:
              ip_address:
                type: string
                example: 104.131.20.105
              netmask:
                type: string
                example: 255.255.192.0
              gateway:
                type: string
                example: 104.131.0.1
          ipv6:
            type: object
            properties:
              ip_address:
                type: string
                example: 2604:A880:0800:0010:0000:0000:017D:2001
              cidr:
                type: integer
                format: int32
                example: 64
              gateway:
                type: string
                example: 2604:A880:0800:0010:0000:0000:0000:0001
          mac:
            type: string
            example: 04:01:2a:0f:2a:01
          Type:
            type: string
            example: public
    Ipv4:
      type: object
      properties:
        ip_address:
          type: string
          example: "104.131.20.105"
        netmask:
          type: string
          example: "255.255.192.0"
        gateway:
          type: string
          example: "104.131.0.1"
    Ipv6:
      type: object
      properties:
        ip_address:
          type: string
          example: "104.131.20.105"
        cidr:
          type: integer
          example: 64
        gateway:
          type: string
          example: "104.131.0.1"

    Floating_ip:
      type: object
      properties:
        ipv4:
          type: object
          properties:
            active:
              type: boolean
              example: false

    Dns:
      type: object
      properties:
        nameservers:
          type: array
          items:
            type: string
          example:
          - 2001:4860:4860::8844
          - 2001:4860:4860::8888
          - 8.8.8.8

    Features:
      type: object
      properties:
        dhcp_enabled:
          type: boolean
          example: true

  responses:
    MovedPermanently:
      description: If you access an index endpoint but forget to add the trailing slash, you will receive a `301 Moved Permanently` response.
      content:
        text/plain:
          example: 301 Not Found

    NotFound:
      description: If you access an endpoint that does not exist, you will receive a `404 Not Found` response. Resolve this by using an existing endpoint.
      content:
        text/plain:
          example: 404 Not Found
